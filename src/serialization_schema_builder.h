#ifndef SERIALIZATION_SCHEMA_BUILDER_H
#define SERIALIZATION_SCHEMA_BUILDER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef SERIALIZATION_SCHEMA_READER_H
#include "serialization_schema_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension "bin"
#endif

#define __Gloxvm_UInt64_formal_args , uint64_t v0
#define __Gloxvm_UInt64_call_args , v0
static inline Gloxvm_UInt64_t *Gloxvm_UInt64_assign(Gloxvm_UInt64_t *p, uint64_t v0)
{ p->u = v0;
  return p; }
static inline Gloxvm_UInt64_t *Gloxvm_UInt64_copy(Gloxvm_UInt64_t *p, const Gloxvm_UInt64_t *p2)
{ p->u = p2->u;
  return p; }
static inline Gloxvm_UInt64_t *Gloxvm_UInt64_assign_to_pe(Gloxvm_UInt64_t *p, uint64_t v0)
{ flatbuffers_uint64_assign_to_pe(&p->u, v0);
  return p; }
static inline Gloxvm_UInt64_t *Gloxvm_UInt64_copy_to_pe(Gloxvm_UInt64_t *p, const Gloxvm_UInt64_t *p2)
{ flatbuffers_uint64_copy_to_pe(&p->u, &p2->u);
  return p; }
static inline Gloxvm_UInt64_t *Gloxvm_UInt64_assign_from_pe(Gloxvm_UInt64_t *p, uint64_t v0)
{ flatbuffers_uint64_assign_from_pe(&p->u, v0);
  return p; }
static inline Gloxvm_UInt64_t *Gloxvm_UInt64_copy_from_pe(Gloxvm_UInt64_t *p, const Gloxvm_UInt64_t *p2)
{ flatbuffers_uint64_copy_from_pe(&p->u, &p2->u);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Gloxvm_UInt64, 8, 8, Gloxvm_UInt64_file_identifier, Gloxvm_UInt64_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Gloxvm_UInt64, Gloxvm_UInt64_t)

#define __Gloxvm_Short_formal_args , int16_t v0
#define __Gloxvm_Short_call_args , v0
static inline Gloxvm_Short_t *Gloxvm_Short_assign(Gloxvm_Short_t *p, int16_t v0)
{ p->s = v0;
  return p; }
static inline Gloxvm_Short_t *Gloxvm_Short_copy(Gloxvm_Short_t *p, const Gloxvm_Short_t *p2)
{ p->s = p2->s;
  return p; }
static inline Gloxvm_Short_t *Gloxvm_Short_assign_to_pe(Gloxvm_Short_t *p, int16_t v0)
{ flatbuffers_int16_assign_to_pe(&p->s, v0);
  return p; }
static inline Gloxvm_Short_t *Gloxvm_Short_copy_to_pe(Gloxvm_Short_t *p, const Gloxvm_Short_t *p2)
{ flatbuffers_int16_copy_to_pe(&p->s, &p2->s);
  return p; }
static inline Gloxvm_Short_t *Gloxvm_Short_assign_from_pe(Gloxvm_Short_t *p, int16_t v0)
{ flatbuffers_int16_assign_from_pe(&p->s, v0);
  return p; }
static inline Gloxvm_Short_t *Gloxvm_Short_copy_from_pe(Gloxvm_Short_t *p, const Gloxvm_Short_t *p2)
{ flatbuffers_int16_copy_from_pe(&p->s, &p2->s);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Gloxvm_Short, 2, 2, Gloxvm_Short_file_identifier, Gloxvm_Short_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Gloxvm_Short, Gloxvm_Short_t)

#define __Gloxvm_Float64_formal_args , float v0
#define __Gloxvm_Float64_call_args , v0
static inline Gloxvm_Float64_t *Gloxvm_Float64_assign(Gloxvm_Float64_t *p, float v0)
{ p->f = v0;
  return p; }
static inline Gloxvm_Float64_t *Gloxvm_Float64_copy(Gloxvm_Float64_t *p, const Gloxvm_Float64_t *p2)
{ p->f = p2->f;
  return p; }
static inline Gloxvm_Float64_t *Gloxvm_Float64_assign_to_pe(Gloxvm_Float64_t *p, float v0)
{ flatbuffers_float_assign_to_pe(&p->f, v0);
  return p; }
static inline Gloxvm_Float64_t *Gloxvm_Float64_copy_to_pe(Gloxvm_Float64_t *p, const Gloxvm_Float64_t *p2)
{ flatbuffers_float_copy_to_pe(&p->f, &p2->f);
  return p; }
static inline Gloxvm_Float64_t *Gloxvm_Float64_assign_from_pe(Gloxvm_Float64_t *p, float v0)
{ flatbuffers_float_assign_from_pe(&p->f, v0);
  return p; }
static inline Gloxvm_Float64_t *Gloxvm_Float64_copy_from_pe(Gloxvm_Float64_t *p, const Gloxvm_Float64_t *p2)
{ flatbuffers_float_copy_from_pe(&p->f, &p2->f);
  return p; }
__flatbuffers_build_struct(flatbuffers_, Gloxvm_Float64, 4, 4, Gloxvm_Float64_file_identifier, Gloxvm_Float64_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Gloxvm_Float64, Gloxvm_Float64_t)

#define __Gloxvm_Boolean_formal_args , flatbuffers_bool_t v0
#define __Gloxvm_Boolean_call_args , v0
static inline Gloxvm_Boolean_t *Gloxvm_Boolean_assign(Gloxvm_Boolean_t *p, flatbuffers_bool_t v0)
{ p->b = v0;
  return p; }
static inline Gloxvm_Boolean_t *Gloxvm_Boolean_copy(Gloxvm_Boolean_t *p, const Gloxvm_Boolean_t *p2)
{ p->b = p2->b;
  return p; }
static inline Gloxvm_Boolean_t *Gloxvm_Boolean_assign_to_pe(Gloxvm_Boolean_t *p, flatbuffers_bool_t v0)
{ p->b = v0;
  return p; }
static inline Gloxvm_Boolean_t *Gloxvm_Boolean_copy_to_pe(Gloxvm_Boolean_t *p, const Gloxvm_Boolean_t *p2)
{ p->b = p2->b;
  return p; }
static inline Gloxvm_Boolean_t *Gloxvm_Boolean_assign_from_pe(Gloxvm_Boolean_t *p, flatbuffers_bool_t v0)
{ p->b = v0;
  return p; }
static inline Gloxvm_Boolean_t *Gloxvm_Boolean_copy_from_pe(Gloxvm_Boolean_t *p, const Gloxvm_Boolean_t *p2)
{ p->b = p2->b;
  return p; }
__flatbuffers_build_struct(flatbuffers_, Gloxvm_Boolean, 1, 1, Gloxvm_Boolean_file_identifier, Gloxvm_Boolean_type_identifier)
__flatbuffers_define_fixed_array_primitives(flatbuffers_, Gloxvm_Boolean, Gloxvm_Boolean_t)

typedef flatbuffers_union_ref_t Gloxvm_Any_union_ref_t;
typedef flatbuffers_union_vec_ref_t Gloxvm_Any_union_vec_ref_t;
static Gloxvm_Any_union_ref_t Gloxvm_Any_clone(flatbuffers_builder_t *B, Gloxvm_Any_union_t t);

static const flatbuffers_voffset_t __Gloxvm_Bytecode_required[] = { 0 };
typedef flatbuffers_ref_t Gloxvm_Bytecode_ref_t;
static Gloxvm_Bytecode_ref_t Gloxvm_Bytecode_clone(flatbuffers_builder_t *B, Gloxvm_Bytecode_table_t t);
__flatbuffers_build_table(flatbuffers_, Gloxvm_Bytecode, 3)

static const flatbuffers_voffset_t __Gloxvm_Module_required[] = { 0 };
typedef flatbuffers_ref_t Gloxvm_Module_ref_t;
static Gloxvm_Module_ref_t Gloxvm_Module_clone(flatbuffers_builder_t *B, Gloxvm_Module_table_t t);
__flatbuffers_build_table(flatbuffers_, Gloxvm_Module, 1)

#define __Gloxvm_Bytecode_formal_args , int16_t v0, Gloxvm_Any_union_ref_t v2
#define __Gloxvm_Bytecode_call_args , v0, v2
static inline Gloxvm_Bytecode_ref_t Gloxvm_Bytecode_create(flatbuffers_builder_t *B __Gloxvm_Bytecode_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Gloxvm_Bytecode, Gloxvm_Bytecode_file_identifier, Gloxvm_Bytecode_type_identifier)

#define __Gloxvm_Module_formal_args , Gloxvm_Bytecode_vec_ref_t v0
#define __Gloxvm_Module_call_args , v0
static inline Gloxvm_Module_ref_t Gloxvm_Module_create(flatbuffers_builder_t *B __Gloxvm_Module_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, Gloxvm_Module, Gloxvm_Module_file_identifier, Gloxvm_Module_type_identifier)

static inline Gloxvm_Any_union_ref_t Gloxvm_Any_as_NONE(void)
{ Gloxvm_Any_union_ref_t uref; uref.type = Gloxvm_Any_NONE; uref.value = 0; return uref; }
static inline Gloxvm_Any_union_ref_t Gloxvm_Any_as_UInt64(Gloxvm_UInt64_ref_t ref)
{ Gloxvm_Any_union_ref_t uref; uref.type = Gloxvm_Any_UInt64; uref.value = ref; return uref; }
static inline Gloxvm_Any_union_ref_t Gloxvm_Any_as_Short(Gloxvm_Short_ref_t ref)
{ Gloxvm_Any_union_ref_t uref; uref.type = Gloxvm_Any_Short; uref.value = ref; return uref; }
static inline Gloxvm_Any_union_ref_t Gloxvm_Any_as_Float64(Gloxvm_Float64_ref_t ref)
{ Gloxvm_Any_union_ref_t uref; uref.type = Gloxvm_Any_Float64; uref.value = ref; return uref; }
static inline Gloxvm_Any_union_ref_t Gloxvm_Any_as_Boolean(Gloxvm_Boolean_ref_t ref)
{ Gloxvm_Any_union_ref_t uref; uref.type = Gloxvm_Any_Boolean; uref.value = ref; return uref; }
__flatbuffers_build_union_vector(flatbuffers_, Gloxvm_Any)

static Gloxvm_Any_union_ref_t Gloxvm_Any_clone(flatbuffers_builder_t *B, Gloxvm_Any_union_t u)
{
    switch (u.type) {
    case 1: return Gloxvm_Any_as_UInt64(Gloxvm_UInt64_clone(B, (Gloxvm_UInt64_struct_t)u.value));
    case 2: return Gloxvm_Any_as_Short(Gloxvm_Short_clone(B, (Gloxvm_Short_struct_t)u.value));
    case 3: return Gloxvm_Any_as_Float64(Gloxvm_Float64_clone(B, (Gloxvm_Float64_struct_t)u.value));
    case 4: return Gloxvm_Any_as_Boolean(Gloxvm_Boolean_clone(B, (Gloxvm_Boolean_struct_t)u.value));
    default: return Gloxvm_Any_as_NONE();
    }
}

__flatbuffers_build_scalar_field(0, flatbuffers_, Gloxvm_Bytecode_type, flatbuffers_int16, int16_t, 2, 2, INT16_C(0), Gloxvm_Bytecode)
__flatbuffers_build_union_field(2, flatbuffers_, Gloxvm_Bytecode_data, Gloxvm_Any, Gloxvm_Bytecode)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Gloxvm_Bytecode_data, Gloxvm_Any, UInt64, Gloxvm_UInt64)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Gloxvm_Bytecode_data, Gloxvm_Any, Short, Gloxvm_Short)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Gloxvm_Bytecode_data, Gloxvm_Any, Float64, Gloxvm_Float64)
__flatbuffers_build_union_struct_value_field(flatbuffers_, Gloxvm_Bytecode_data, Gloxvm_Any, Boolean, Gloxvm_Boolean)

static inline Gloxvm_Bytecode_ref_t Gloxvm_Bytecode_create(flatbuffers_builder_t *B __Gloxvm_Bytecode_formal_args)
{
    if (Gloxvm_Bytecode_start(B)
        || Gloxvm_Bytecode_data_add_value(B, v2)
        || Gloxvm_Bytecode_type_add(B, v0)
        || Gloxvm_Bytecode_data_add_type(B, v2.type)) {
        return 0;
    }
    return Gloxvm_Bytecode_end(B);
}

static Gloxvm_Bytecode_ref_t Gloxvm_Bytecode_clone(flatbuffers_builder_t *B, Gloxvm_Bytecode_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Gloxvm_Bytecode_start(B)
        || Gloxvm_Bytecode_data_pick(B, t)
        || Gloxvm_Bytecode_type_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Gloxvm_Bytecode_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, Gloxvm_Module_code, Gloxvm_Bytecode, Gloxvm_Module)

static inline Gloxvm_Module_ref_t Gloxvm_Module_create(flatbuffers_builder_t *B __Gloxvm_Module_formal_args)
{
    if (Gloxvm_Module_start(B)
        || Gloxvm_Module_code_add(B, v0)) {
        return 0;
    }
    return Gloxvm_Module_end(B);
}

static Gloxvm_Module_ref_t Gloxvm_Module_clone(flatbuffers_builder_t *B, Gloxvm_Module_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (Gloxvm_Module_start(B)
        || Gloxvm_Module_code_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, Gloxvm_Module_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* SERIALIZATION_SCHEMA_BUILDER_H */
